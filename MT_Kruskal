library(optrees)
library(dplyr)
library(igraph)
library(jsonlite)
arcs_org <- read.csv('similarity.csv')
arcs_output <- arcs_org #%>% mutate(edge=0)
names(arcs_output) <- c('node1','node2','similarity')
arcs_output$node1 <- factor(arcs_output$node1)

level <- c(levels(arcs_output$node1),arcs_output$node2[length(arcs_output$node1)])
arcs_output <- arcs_output %>%
        mutate(node1 = factor(arcs_output$node1,levels=level),
               node2 = factor(arcs_output$node2,levels=level),
               node1 = as.numeric(node1),
               node2 = as.numeric(node2))

arcs <- as.matrix(arcs_output)

#arcs <- arcs_org
#transfer similarity to weight
arcs[,3] <- 1-arcs[,3]
nodes <- unique(c(arcs[,1],arcs[,2]))
KKT <- msTreeKruskal(nodes, arcs)
result <- KKT$tree.arcs
result_list <- list()

for(i in 1:(length(nodes)-1)){
        arcs_result <- acrs_output
        if(i ==1){
                result_node <- data.frame(t(result[1,]))
        }else{
                result_node <- data.frame(result[1:i,])
        }
        node <- unique(c(result_node$ept1,result_node$ept2))
        v <- data.frame(name = node)
        e <- data.frame(from = result_node$ept1,
                        to = result_node$ept2)
        g <- graph_from_data_frame(e, directed=F, vertices=v)
        cluster <- data.frame(cbind(names(components(g)$membership),components(g)$membership),stringsAsFactors = F)
        names(cluster) <- c('node','group')
        cluster <- cluster %>% mutate(node = as.numeric(node),
                                      node = level[node]) 
        result_list[[i]] <- cluster
        # cat(i,'\n')
}
write_json(result_list,  "result_list.json")
